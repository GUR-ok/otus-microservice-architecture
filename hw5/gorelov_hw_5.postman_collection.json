{
	"info": {
		"_postman_id": "11ab002f-39ca-416d-a19d-01187181335f",
		"name": "gorelov_hw_5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20534987"
	},
	"item": [
		{
			"name": "Health Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"/auth path is not secured\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}:{{port}}/auth/health",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{port}}",
					"path": [
						"auth",
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Health Profiles NO JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{baseUrl}}:{{port}}/health",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{port}}",
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth Login Try",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.collectionVariables.set (\"randomNum\", _.random (1,1000));\r",
							"pm.collectionVariables.set (\"login\", \"login\"+pm.collectionVariables.get(\"randomNum\"));\r",
							"\r",
							"pm.test(\"Given unexisted login Then status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"var msg = pm.response.text();\r",
							"\r",
							"pm.test(\"Given unexisted login then msg value is expected\", function () {\r",
							"    pm.expect(msg).to.equal(\"User not found\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"gur@mail.ru\",\r\n    \"login\": \"unexistedLogin\",\r\n    \"password\": \"myPassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{port}}/auth/login",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{port}}",
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"user_id\", jsonData.userId);\r",
							"\r",
							"pm.test(\"When register with new login Then status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"gur@mail.ru\",\r\n    \"login\": \"{{login}}\",\r\n    \"password\": \"myPassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{port}}/auth/register",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{port}}",
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"token\", jsonData.token);\r",
							"\r",
							"pm.test(\"When login with correct creds then status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"gur@mail.ru\",\r\n    \"login\": \"{{login}}\",\r\n    \"password\": \"myPassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{port}}/auth/login",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{port}}",
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth Register With Same Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"When register with existed login Then status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"gur@mail.ru\",\r\n    \"login\": \"{{login}}\",\r\n    \"password\": \"myPassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{port}}/auth/register",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{port}}",
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "jwks.json",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-auth-token",
						"value": "{{token}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}:{{port}}/auth/.well-known/jwks.json",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{port}}",
					"path": [
						"auth",
						".well-known",
						"jwks.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "Health Profiles Valid  JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-auth-token",
						"value": "{{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}:{{port}}/health",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{port}}",
					"path": [
						"health"
					]
				}
			},
			"response": []
		},
		{
			"name": "Health Profiles InValid JWT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"var msg = pm.response.text();\r",
							"\r",
							"pm.test(\"Given invalid token Then msg value is expected\", function () {\r",
							"    pm.expect(msg).to.equal(\"Jwt verification fails\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-auth-token",
						"value": "{{token}}invalid_token_here",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}:{{port}}/health",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{port}}",
					"path": [
						"health"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "localhost",
			"type": "string",
			"disabled": true
		},
		{
			"key": "baseUrl",
			"value": "arch.homework",
			"type": "string"
		},
		{
			"key": "port",
			"value": "8082",
			"type": "string",
			"disabled": true
		},
		{
			"key": "port",
			"value": "30001",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "login",
			"value": "",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomNum",
			"value": "",
			"type": "string"
		}
	]
}