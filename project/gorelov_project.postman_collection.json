{
	"info": {
		"_postman_id": "11ab002f-39ca-416d-a19d-01187181335f",
		"name": "gorelov_hw_project",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20534987"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Auth Login Try",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.collectionVariables.set (\"randomNum\", _.random (1,1000));\r",
									"pm.collectionVariables.set (\"login\", \"login\"+pm.collectionVariables.get(\"randomNum\"));\r",
									"\r",
									"pm.test(\"Given unexisted login Then status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"var msg = pm.response.text();\r",
									"\r",
									"pm.test(\"Given unexisted login then msg value is expected\", function () {\r",
									"    pm.expect(msg).to.equal(\"User not found\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"gur@mail.ru\",\r\n    \"login\": \"unexistedLogin\",\r\n    \"password\": \"myPassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/auth/login",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.collectionVariables.set(\"user_id\", jsonData.userId);\r",
									"pm.collectionVariables.set(\"profile_id\", jsonData.profileId);\r",
									"\r",
									"pm.test(\"When register with new login Then status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"gur@mail.ru\",\r\n    \"login\": \"{{login}}\",\r\n    \"password\": \"myPassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/auth/register",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.collectionVariables.set(\"token\", jsonData.token);\r",
									"pm.collectionVariables.set(\"session\", jsonData.session);\r",
									"\r",
									"pm.test(\"When login with correct creds then status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"gur@mail.ru\",\r\n    \"login\": \"{{login}}\",\r\n    \"password\": \"myPassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/auth/login",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Auth Register With Same Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"When register with existed login Then status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"gur@mail.ru\",\r\n    \"login\": \"{{login}}\",\r\n    \"password\": \"myPassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/auth/register",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "jwks.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/auth/.well-known/jwks.json",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								".well-known",
								"jwks.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Read Profile Valid JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var fullName = (jsonData.fullName);\r",
									"var age = (jsonData.age);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Assert new profile fullName is null\", function () {\r",
									"    pm.expect(fullName).null;\r",
									"});\r",
									"\r",
									"pm.test(\"Assert new profile age is null\", function () {\r",
									"    pm.expect(age).null;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "x-auth-session",
								"value": "{{session}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/profiles/{{profile_id}}",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"profiles",
								"{{profile_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Profile Invalid JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{token}}invalid_token_here",
								"type": "text"
							},
							{
								"key": "x-auth-session",
								"value": "{{session}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/profiles/{{profile_id}}",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"profiles",
								"{{profile_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read Profile No JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/profiles/{{profile_id}}",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"profiles",
								"{{profile_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile Valid JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PATCH",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "x-auth-session",
								"value": "{{session}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"fullName\": \"{{new_fullName}}\",\r\n    \"age\": {{new_age}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/profiles/{{profile_id}}",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"profiles",
								"{{profile_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read UpdatedProfile Valid JWT",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var fullName = (jsonData.fullName);\r",
									"var age = (jsonData.age);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Assert firstName value is correct\", function () {\r",
									"    pm.expect(fullName).to.equal(pm.collectionVariables.get(\"new_fullName\"))\r",
									"});\r",
									"\r",
									"pm.test(\"Assert lastName value is correct\", function () {\r",
									"    pm.expect(age).to.equal(parseInt(pm.collectionVariables.get(\"new_age\")))\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "x-auth-token",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "x-auth-session",
								"value": "{{session}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/profiles/{{profile_id}}",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"profiles",
								"{{profile_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Health",
			"item": [
				{
					"name": "Health Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var health = (jsonData.status);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status UP\", function () {\r",
									"    pm.expect(health).to.equal('OK')\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/auth/health",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"auth",
								"health"
							],
							"query": [
								{
									"key": "",
									"value": "asfa",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Health Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"var health = (jsonData.status);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status UP\", function () {\r",
									"    pm.expect(health).to.equal('OK')\r",
									"    });\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{baseUrl}}:{{port}}/profiles/health",
							"protocol": "http",
							"host": [
								"{{baseUrl}}"
							],
							"port": "{{port}}",
							"path": [
								"profiles",
								"health"
							],
							"query": [
								{
									"key": "",
									"value": "asfa",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth Register Second User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"profile_id_user2\", jsonData.profileId);\r",
							"\r",
							"pm.test(\"When register with new login Then status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"gur@mail.ru\",\r\n    \"login\": \"{{login}}2\",\r\n    \"password\": \"myPassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{port}}/auth/register",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{port}}",
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth Login Second User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.collectionVariables.set(\"token_user2\", jsonData.token);\r",
							"pm.collectionVariables.set(\"session\", jsonData.session);\r",
							"\r",
							"pm.test(\"When login with correct creds then status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"gur@mail.ru\",\r\n    \"login\": \"{{login}}2\",\r\n    \"password\": \"myPassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{port}}/auth/login",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{port}}",
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Read Profile Valid JWT Other User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"var msg = pm.response.text();\r",
							"\r",
							"pm.test(\"When try to read other profile then return unauthorized\", function () {\r",
							"    pm.expect(msg).to.equal(\"Unauthorized!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "x-auth-token",
						"value": "{{token_user2}}",
						"type": "text"
					},
					{
						"key": "x-auth-session",
						"value": "{{session}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{baseUrl}}:{{port}}/profiles/{{profile_id}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{port}}",
					"path": [
						"profiles",
						"{{profile_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Profile Valid JWT Other user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"var msg = pm.response.text();\r",
							"\r",
							"pm.test(\"When try to read other profile then return unauthorized\", function () {\r",
							"    pm.expect(msg).to.equal(\"Unauthorized!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "x-auth-token",
						"value": "{{token_user2}}",
						"type": "text"
					},
					{
						"key": "x-auth-session",
						"value": "{{session}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"fullName\": \"{{new_fullName}}\",\r\n    \"age\": {{new_age}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{baseUrl}}:{{port}}/profiles/{{profile_id}}",
					"protocol": "http",
					"host": [
						"{{baseUrl}}"
					],
					"port": "{{port}}",
					"path": [
						"profiles",
						"{{profile_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "arch.homework",
			"type": "string"
		},
		{
			"key": "port",
			"value": "30001",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "login",
			"value": "",
			"type": "string"
		},
		{
			"key": "token",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomNum",
			"value": "",
			"type": "string"
		},
		{
			"key": "profile_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "new_fullName",
			"value": "edited_name",
			"type": "string"
		},
		{
			"key": "new_age",
			"value": "35",
			"type": "string"
		},
		{
			"key": "profile_id_user2",
			"value": "",
			"type": "string"
		},
		{
			"key": "token_user2",
			"value": "",
			"type": "string"
		},
		{
			"key": "session",
			"value": "",
			"type": "string"
		},
		{
			"key": "x-auth-session",
			"value": ""
		}
	]
}